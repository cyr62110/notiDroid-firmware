#ifndef NDEVENTBUSCORECONSTANTS_H_
#define NDEVENTBUSCORECONSTANTS_H_

/**
 * Definition of which kind of event we are sending.
 * HW : Events that are generated by modules working with the PIC hardware as Timer, UART, etc.
 * SW : Events that are generated by modules that have nothing to do with the hardware. For ex. the eventbus.
 */
#define EVENT_TYPE_HW 0
#define EVENT_TYPE_SW 1

/**
 * Module id of eventbus when it sends an event in the eventbus
 */
#define EVENT_MODULE_EVENTBUS 0

/**
 * Event ids of events that can be sent by the eventbus
 */
/**
 * The handler of this function MUST register all module and event handlers.
 * This handler is only called once when the eventbus initialize itself for the very first
 * time on this hardware. Reboot will not make this event to be triggered again.
 */
#define EVENT_EVENTBUS_REGISTER_HANDLERS 0x24 //Read as japenese do :)

/**
 */
#define EVENT_EMPTY_PAYLOAD 0
#define EVENT_1BYTE_PAYLOAD 1
#define EVENT_2BYTES_PAYLOAD 2
#define EVENT_4BYTES_PAYLOAD 3

/*
 * The eventbus require some eeprom to maintain some value between shutdown/start
 * cycle.
 */
#define EVENTBUS_RESERVED_EEPROM_LENGTH 1

/**
 * We define the maximum number of module that our event dispatcher can handle by type.
 */
#define EVENTBUS_MAX_NUMBER_OF_MODULE_PER_TYPE 4

#define EVENTBUS_AVG_NUMBER_OF_EVENT_PER_MODULE 4

/**
 * Length in bytes of the code required to branch to the code that will handle events of a module in a dispatcher function.
 */
#define EVENTBUS_MODULE_LENGTH 10

/**
 * Length in bytes of the code required to branch to the function registered as the receiver of an event
 */
#define EVENTBUS_EVENT_LENGTH 10

/**
 * The dispatchSoftwareEventToModule function will be placed at 32 times this value
 * minus the hardcoded part lenght
 */
#define EVENTBUS_SOFTWARE_MODULE_DISPATCHER_ALIGNMENT 80

/**
 * The lenght of the hardcoded part of the dispatchSoftwareEventToModule function that handle
 * events of the eventbus itself.
 */
#define EVENTBUS_SOFTWARE_MODULE_HARDCODED_PART_LENGTH EVENTBUS_MODULE_LENGTH

#define EVENTBUS_SOFTWARE_EVEN_HARDCODED_PART EVENTBUS_EVENT_LENGTH + 2

/**
 * The absolute address in the program where the dispatchSoftwareEventToModule function will be placed.
 */
#define EVENTBUS_SOFTWARE_MODULE_DISPATCHER_ADDRESS (32 * EVENTBUS_SOFTWARE_MODULE_DISPATCHER_ALIGNMENT - EVENTBUS_SOFTWARE_MODULE_HARDCODED_PART_LENGTH)

/**
 * The absolute address in the program where the dispatchSoftwareEventToHandler function will be placed.
 */
#define EVENTBUS_SOFTWARE_EVENT_DISPATCHER_ADDRESS (32 * (((32 * EVENTBUS_SOFTWARE_MODULE_DISPATCHER_ALIGNMENT + EVENTBUS_MAX_NUMBER_OF_MODULE_PER_TYPE * EVENTBUS_MODULE_LENGTH + 2) >> 5) + 1) - EVENTBUS_SOFTWARE_EVEN_HARDCODED_PART)

/**
 * In order to generate free space in dispatcher function, we need to fill them
 * with NOP. So here we define some macro to make the work a bit painless.
 * The number at the end is the number of instructions that we will keep free
 * for the user program.
 */
#define EVENTBUS_NOP asm("nop");
#define EVENTBUS_NOP2 EVENTBUS_NOP EVENTBUS_NOP
#define EVENTBUS_NOP4 EVENTBUS_NOP2 EVENTBUS_NOP2
#define EVENTBUS_NOP8 EVENTBUS_NOP4 EVENTBUS_NOP4
#define EVENTBUS_NOP16 EVENTBUS_NOP8 EVENTBUS_NOP8
#define EVENTBUS_NOP32 EVENTBUS_NOP16 EVENTBUS_NOP16
#define EVENTBUS_NOP64 EVENTBUS_NOP32 EVENTBUS_NOP32
#define EVENTBUS_NOP128 EVENTBUS_NOP64 EVENTBUS_NOP64

#endif