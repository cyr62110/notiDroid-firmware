#ifndef NDEVENTBUSCORECONSTANTS_H_
#define NDEVENTBUSCORECONSTANTS_H_

/**
 * Definition of which kind of event we are sending.
 * HW : Events that are generated by modules working with the PIC hardware as Timer, UART, etc.
 * SW : Events that are generated by modules that have nothing to do with the hardware. For ex. the eventbus.
 */
#define EVENT_TYPE_HW 0
#define EVENT_TYPE_SW 1

/**
 * Module id of eventbus when it sends an event in the eventbus
 */
#define EVENT_MODULE_EVENTBUS 0

/**
 * Event ids of event that can be sent by the eventbus
 */
#define EVENT_DISPATCHER_REGISTER_HANDLERS 0x40

/**
 */
#define EVENT_EMPTY_PAYLOAD 0
#define EVENT_1BYTE_PAYLOAD 1
#define EVENT_2BYTES_PAYLOAD 2
#define EVENT_4BYTES_PAYLOAD 3

/*
 * The eventbus require some eeprom to maintain some value between shutdown/start
 * cycle.
 */
#define EVENTBUS_RESERVED_EEPROM_LENGTH 1

/**
 * We define the maximum number of module that our event dispatcher can handle by type.
 */
#define EVENTDISPATCHER_MAX_NUMBER_OF_MODULE_PER_TYPE 4  

#define EVENTDISPATCHER_MODULES_BLOCK_LENGHT 

#define EVENTDISPATCHER_BLOCK_HARDWARE_MODULES_START_ADDRESS

/**
 * In order to generate free space in dispatcher function, we need to fill them
 * with NOP. So here we define some macro to make the work a bit painless.
 * The number at the end is the number of instructions that we will keep free
 * for the user program.
 */
#define EVENTBUS_NOP asm("nop");
#define EVENTBUS_NOP2 EVENTBUS_NOP EVENTBUS_NOP
#define EVENTBUS_NOP4 EVENTBUS_NOP2 EVENTBUS_NOP2
#define EVENTBUS_NOP8 EVENTBUS_NOP4 EVENTBUS_NOP4
#define EVENTBUS_NOP16 EVENTBUS_NOP8 EVENTBUS_NOP8
#define EVENTBUS_NOP32 EVENTBUS_NOP16 EVENTBUS_NOP16
#define EVENTBUS_NOP64 EVENTBUS_NOP32 EVENTBUS_NOP32
#define EVENTBUS_NOP128 EVENTBUS_NOP64 EVENTBUS_NOP64

#endif